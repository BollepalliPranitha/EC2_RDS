name: RDS Booking System CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger when changes are pushed to the main branch
  # Prevents triggering on commits made by GitHub Actions
    paths-ignore:
      - "query_results.yaml"

jobs:
  setup:
    runs-on: ubuntu-latest  # We will run this job on an Ubuntu environment

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2  # This checks out the code from the repository

    - name: Set up Python environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'  # Set the Python version to use

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        sudo apt install -y unixodbc-dev
        pip install -r requirements.txt  # Install dependencies from your requirements.txt

    - name: Set up SSH for EC2 connection
      run: |
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
        chmod 600 private_key.pem
        eval $(ssh-agent -s)
        ssh-add private_key.pem
    - name: Upload files to EC2 using rsync
      run: |
        # Install rsync on EC2 if it's not already installed
        ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} "sudo yum install -y rsync"
        # Ensure the target directory exists before uploading
        ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} "mkdir -p /home/ec2-user/booking_system" 
        # Use rsync to upload files while excluding the .git directory
        rsync -avz --exclude '.git' -e "ssh -i private_key.pem -o StrictHostKeyChecking=no" ./ ec2-user@${{ secrets.EC2_IP }}:/home/ec2-user/booking_system
    - name: Install necessary tools on EC2
      run: |
        # SSH into EC2 and install tools
        ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} << 'EOF'
          # Update system and install required packages
          sudo yum update -y
          sudo yum install -y python3-devel unixODBC-devel

          # Install Microsoft ODBC Driver 17 for SQL Server
          # Amazon Linux 2023 requires a slightly different approach than RHEL 7
          if ! rpm -q msodbcsql17; then
            echo "Installing ODBC Driver 17 for SQL Server..."
            # Add Microsoft repository and install the driver
            sudo curl -o /etc/yum.repos.d/msprod.repo https://packages.microsoft.com/config/amazonlinux/2/prod.repo
            sudo yum install -y msodbcsql17
            sudo yum clean all

            # Verify installation
            if [ $? -ne 0 ]; then
              echo "Failed to install msodbcsql17!"
              exit 1
            fi
          else
            echo "msodbcsql17 is already installed."
          fi

          # Ensure the driver is registered with unixODBC
          if [ ! -f /etc/odbcinst.ini ] || ! grep -q "ODBC Driver 17 for SQL Server" /etc/odbcinst.ini; then
            echo "Registering ODBC Driver 17 for SQL Server with unixODBC..."
            sudo bash -c 'echo -e "[ODBC Driver 17 for SQL Server]\nDescription=Microsoft ODBC Driver 17 for SQL Server\nDriver=/opt/microsoft/msodbcsql17/lib64/libmsodbcsql-17.10.so.6.1" >> /etc/odbcinst.ini'
          fi

          # Install Python pip and dependencies
          pip3 install --upgrade pip
          pip3 install -r /home/ec2-user/booking_system/requirements.txt

          # Verify ODBC driver availability
          odbcinst -q -d
          echo "ODBC Driver 17 for SQL Server and pip dependencies installed successfully"
        EOF
  
    - name: Run database setup and booking trigger scripts on EC2
      run: |
        ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} << 'EOF'
          cd /home/ec2-user/booking_system
          python3 db_setup.py  # Run the setup script to create DB, tables and insert data
          python3 booking_trigger.py  # Run the booking trigger script to insert bookings and calculate costs
        EOF

    - name: Run custom SQL queries on EC2 and fetch results
      run: |
        ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_IP }} << 'EOF'
          cd /home/ec2-user/booking_system
          python3 run_queries.py  # Run the custom query script to fetch results
        EOF

    - name: Commit and push query results back to repository
      run: |
        git add query_results.yaml  # Add the file containing the results of the query
        git commit -m "Automated update from EC2 query results"
        git push origin main  # Push the changes to the main branch

 